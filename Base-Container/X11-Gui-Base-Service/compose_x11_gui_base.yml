# This file is part of: APP-Forward-X11-Development-Template-Stack
# Copyright (c) 2024 Nico Jan Eelhart
#
# This source code is licensed under the MIT License found in the  'LICENSE.md' file in the root directory of this source tree.
#

# GOAL
# Running a GUI application inside a Docker container on a Windows host using Docker Desktop 
# with WSL2 and X11 forwarding allow you to run Linux containers while forwarding the GUI to your Windows host.
# 
# 	BEFORE executing the compose Docker command make sure you have read 'howto_create_a_dev_container.md' in the Howtos folder
#	This contains important instructions that NEED to be executed before running this base container


# 1.1 Define a network where the container has a fixed IP address
# bridge does not work on Docker Desktop(DD) with Windows containers, but works fine under DD with Linux containers
#
# When in the same network, using both the same 'nat' and 'bridge' setting, containers can communicate with each other via their
# the service names (x11_network-fixed in this case) or IP address, no port mappings needed for inter-container communication.
#
# You can replace 'nat', 'bridge' with 'overlay' which is meant for production clusters, load balancing (Docker Swarm or Kubernetes 
# deployments) For simple, local setups where multi-host communication is not needed, using overlay might be overkill.
# 
# See the file: '.env' for the variables
# docker network create external-example

# Sample fixed network
#  x11_forward-network-fixed: 
#    name: ext_x11_forward-network-fixed
#    driver: bridge 
#    ipam:
#      config:
#        - subnet: ${FIXED_SUBNET}

# 1.2 Here we are defining and using an external network
networks:
  network_common_X11_gui:			# Define a network
    external: true			  		# Use external network
    name: network_common_X11_gui
    driver: bridge 
    ipam:
      config:
        - subnet: ${FIXED_SUBNET}



volumes:
  vol_wpf:
  

services:               
    x11-gui-basic-service:                        #  Our service
        build:
            context: .  
            dockerfile: Dockerfile_X11-Gui-Base
        image: eelhart/x11-gui-base:latest # This name can be used to extend or chain this image.
        networks:
            network_common_X11_gui:
              ipv4_address: ${FIXED_IP1}         # Use a fixed IP address for this container
        environment:
            - PORT=${PORT}                      # Pass variable from .env to PORT (1e), this is available in the 
                                                # container(ENV) and in dockerfile, during building after
                                                # defining: 'ARG PORT' in the docker file
            - DISPLAY=host.docker.internal:0    # THIS relays the linux output to vcxsrv(Xlaunch) Also added in the Docker file!   
        volumes:
            - /tmp/.X11-unix:/tmp/.X11-unix     # MOUNTS the X11 socket GUI directory
        command: ["/bin/sh", "-c", "while sleep 1000; do :; done"]  # use this in case of err, let's you get in(CMD)


# 1)  Create external network
# docker network create --subnet=192.168.52.0/28 network_common_X11_gui
# (USe ` docker network ls` to display the networks)

# 2) Create this container:
# docker-compose -f  compose_x11_gui_base.yml up -d --build --force-recreate  --remove-orphans
