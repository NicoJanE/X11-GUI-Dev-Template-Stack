; Enable Xdebug extension module
zend_extension=xdebug.so

[xdebug]
; Xdebug Mode:
; xdebug.mode controls the functionality enabled in Xdebug. You should only enable the necessary ones.
; You can enable more than one mode but be careful as some may conflict or overload debugging.
; - debug: Enables debugging (default and recommended for standard debugging).
; - develop: Enables additional diagnostics and warnings.
; - profile: Enables profiling, use this when analyzing performance.
; - trace: Enables function tracing, which records all function calls.
; Don't combine modes like debug and profile at the same time, as it may cause issues.

xdebug.mode = debug          ; Enable debugging mode for standard use

; xdebug.mode = debug, develop						; Enable debugging + extra diagnostics (use carefully as it can cause issues when debugging different applications)
; xdebug.mode = profile     						; Okay for profiling, use only when needed
; xdebug.mode = trace        						; Okay for tracing functions, use only when needed


; *** IMPORTANT! ***
; To make sure different PHP projects use different sessions, to don't interact with each one, use
; the setting below AND ALSO make sure to export the environment variable 'XDEBUG_SESSION' with differnt values per project
; Example:export XDEBUG_SESSION=project1
; BUT for VSC it is better to set this in the launch.json, like:
; "env": {
;  		      "XDEBUG_SESSION": "project1"
;        }
xdebug.start_with_request = yes		; the above off is not enough to turn it off this also must be st to 'no' !



; Host Configuration for Xdebug to connect to your IDE:
; For Windows/Mac, uncomment and set this to 'host.docker.internal' to connect back to the host machine
; For Linux, set this to the actual host IP (use 'hostname -i' to get it)
xdebug.client_host = {{FIXED_IP}} ; hostname -i 				 ; Replace with your host IP (e.g., hostname -i on Linux)


xdebug.client_port = 9003			   		 ; Port where Xdebug will connect to your IDE (use 9003 for Xdebug 3)		
xdebug.log = /opt/www/log/xdebug.log		 ; Path to store Xdebug logs (ensure the directory is writable)
xdebug.log_level = 7                         ; 0 (off), 1 (error), 3 (warnings), 7 (debug information)

; Optional settings for deep variable inspection and recursion prevention:
xdebug.max_nesting_level = 256               ; Increase if encountering "maximum nesting level reached" errors

; Optional: Set maximum variable and array/object depth for inspection
xdebug.var_display_max_depth = 3             ; Default: 3, adjust for deep objects/arrays
xdebug.var_display_max_children = 128        ; Default: 128, increase for large arrays/objects
xdebug.var_display_max_data = 1024           ; Default: 512, adjust for large string outputs

; Optional security feature: restrict remote debugging to specific IP addresses
; xdebug.discover_client_host = no
; xdebug.client_discovery_header = X-Forwarded-For

; Code Coverage:
; Enable this only if you are using code coverage tools like PHPUnit
xdebug.coverage_enable = 0                   ; Set to 1 if using code coverage tools like PHPUnit


; Set the IDE key if your IDE requires it for debugging integration (useful for setting session IDs)
xdebug.idekey = VSC                     ; Set IDE key to match your IDE if needed


; Remote Debugging Configuration (for debugging PHP in a container or remote environment):
; These settings are not needed if you're debugging directly from the container to the IDE.
; Commented out here as it is not necessary in your remote container setup.
;xdebug.remote_timeout = 200                 ; Default: 200 ms, increase if debugging over slow networks
;xdebug.remote_autostart=0       ; Ensures a fresh session
;xdebug.remote_connect_back=1    ; Enables automatic connection back to your IDE
;xdebug.remote_enable=1          ; Enables Xdebug remote debugging
;xdebug.remote_host={{FIXED_IP}} ; IP address of your host, this is replaced by the docker file when executed
;xdebug.remote_port=9003         ; The port where the IDE listens
;xdebug.remote_mode=req        ; Only starts debugging if specifically requested
;xdebug.remote_log=/tmp/xdebug.log  ; Enable logging for Xdebug to troubleshoot


; Profiling output:
; Use this section for performance monitoring when profiling is needed. Profiling can generate large files, so use with caution.
; Profiling files can be outputted in a specified directory and named uniquely using the process ID.
; xdebug.output_dir = /opt/www/log/xdebug_profiles ; Directory to store profile files
; xdebug.profiler_output_name = cachegrind.out.%p  ; Unique name for each profile (e.g., PID-based)
