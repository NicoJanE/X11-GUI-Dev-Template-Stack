# This file is part of: PHP Development Template Stack 
# Copyright (c) 2025 Nico Jan Eelhart
#
# This source code is licensed under the MIT License found in the  'LICENSE.md' file in the root directory of this source tree.
#

# *** Extending/Chaining ***
# This requires that the base image is build()        
#        - In the folder: '../../App-X11-Forward-BASE-Service'  Execute:   
#          docker build -t eelhart/eelhart/x11-gui-base:latest -f Dockerfile_App-Forward-X11_Base .
#
#           This will create the image but ***NOT*** the network. So it is better to build and create  
#           the whole container with:
#               docker-compose -f compose_net_x11_base.yml up -d --build
#           After that the image is present and the container,you can delete the container after this
#
FROM eelhart/x11-gui-base:latest

# For GUI forwarding
ENV DISPLAY=host.docker.internal:0

# Set arguments, MAKE SURE the environment variables are assigned here (file:.env) so there available.
ARG PRJ_NAME_ARG
ENV PRJ_NAME_ARG=${PRJ_NAME_ARG}
ARG PRJ_BASE_ARG
ENV PRJ_BASE_ARG=${PRJ_BASE_ARG}
ARG FIXED_IP
ENV FIXED_IP=${FIXED_IP}
ARG PRJ_TYPE_USE_CUSTOM_APP
ENV PRJ_TYPE_USE_CUSTOM_APP=${PRJ_TYPE_USE_CUSTOM_APP}

# ***** These instructions depend and are tested only on the 'bookworm' Apache version *** !!!
# 1.1) INSTALL PHP and some other required software -y makes sure defaults are applied during installation (always run apt-get update 1e )	
RUN apt-get update && \
apt-get install -y software-properties-common && \
add-apt-repository -y ppa:ondrej/php && \
apt-get update && \
apt-get install -y php8.2 php8.2-xdebug php8.2-fpm nano net-tools apache2 apache2-utils rsync && \
apt-get clean && \
rm -rf /var/lib/apt/lists/*


# Create a symlink to point to the correct modules directory
#RUN mkdir -p /usr/local/apache2 && ln -s /usr/lib/apache2/modules /opt/apache2/modules
RUN mkdir -p /opt/apache2 && ln -s /usr/lib/apache2/modules /opt/apache2/modules


#
# Get PHP repository
# Add the PHP repository
RUN wget -qO - https://packages.sury.org/php/apt.gpg | apt-key add - && \
    echo "deb https://packages.sury.org/php/ bookworm  main" > /etc/apt/sources.list.d/php.list && \    
    apt-get update


# 1.3 Copy required files, to start Apache and to use our own configuration files
COPY required_apache/start.* /opt/apache2/
COPY required_apache/httpd.conf /opt/apache2/conf/
COPY required_apache/mime.types /opt/apache2/conf/
COPY required_apache/httpd-vhosts.conf /opt/apache2/conf/extra/

# 1.3.1 Copy the necessary files from the build context into the Docker image
# Otherwise we can not create the project files from the template (see 4)
RUN mkdir -p ${PRJ_BASE_ARG}
WORKDIR ${PRJ_BASE_ARG}
COPY Project-Templates/    ${PRJ_BASE_ARG}/Project-Templates/

# 1.4 Expose ports (Don't put comments behind the port on same line = error!)
EXPOSE 8071
EXPOSE 9000
EXPOSE 9003



# 2.1) Install PHPUNIT required packages 
# 2.1.1) Install related packages for composer
RUN apt-get update && apt-get install -y --no-install-recommends  \
    unzip \
    git \
	curl \			
	php8.2-mbstring \
	php8.2-xml \
    && rm -rf /var/lib/apt/lists/* 
	
# 2.2) Install PHPUNIT	 
# 2. 2.1) Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
ENV PATH="/root/.config/composer/vendor/bin:${PATH}"
#
# 2.2.2) Set up global composer bin directory in PATH
RUN echo 'export PATH="/root/.config/composer/vendor/bin:$PATH"' >> ~/.bashrc \
    && . ~/.bashrc
#
# 2.2.3) Install phpunit  http://localhost:8071\phpinfo.php
# Requires mbstring in php.ini ? 
RUN composer global require phpunit/phpunit


# 3.1 Install necessary dependencies, including Python
RUN apt-get update && apt-get install -y \
    python3 \
    python3-venv \
    python3-pip \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
	
# 3.2 Install PySide6 for our GUI interface (based on Qt 6.0+) PySide6 is available under both Open Source (LGPLv3/GPLv3) and commercial 
# https://www.qt.io/pricing?filter=development-tools
#
# First make sure to have openGL support for PySide6
RUN apt-get update && apt-get install -y \
    libegl1 libopengl0 libgl1  libxcb-cursor0 \
    libxcb1 libx11-xcb1 libxcb-xinerama0 libxcb-randr0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxcb-sync1 libxcb-xkb1 libxkbcommon-x11-0 \
    libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 \
    libxcb-util1 libfontconfig1 libxrandr2 libxi6 libxcomposite1 \
    libxdamage1 libxrender1 libxtst6 libxxf86vm1 && \
    rm -rf /var/lib/apt/lists/*
#
# Second, create a virtual environment and install PySide6 inside it, by default\typically the virtual env. is created in:
# /opt/ (see command below) Another location would be in the project folder (/project-name/.venv)
# While activation of the VM is not needed, for debugging in VSC is strongly recommend to activate it (use a preLaunchTask)
# like: CMD ["/bin/bash", "-c", "source /opt/python-env/bin/activate"]
RUN python3 -m venv /opt/python-env && \
    /opt/python-env/bin/pip install --upgrade pip && \
    /opt/python-env/bin/pip install PySide6
RUN echo 'export PATH="/opt/python-env/bin:$PATH"' >> ~/.bashrc \
    && . ~/.bashrc
 ENV PATH="/opt/python-env/bin:$PATH"


# 4.0 Create projects from our template projects.
#
# Note: rsync will automatically create the destination directory and sub Dir's 
#       if it doesnâ€™t exist (use '-a' and add '/'' to last target dir)
#
WORKDIR ${PRJ_BASE_ARG}
RUN mkdir -p /opt/www/public
#       The original template source files are located in: ${PRJ_BASE_ARG}/Project-Templates/ and will be 
#       copied to our project in:  ${PRJ_NAME_ARG}/web-app/ (web-app will contain the  REst API for the Python desktop GUI app)
#
# 4.1.1 Create the web-app in the project
RUN mkdir -p ${PRJ_NAME_ARG}/web-app/ 
RUN rsync -a ./Project-Templates/web-app/ ${PRJ_NAME_ARG}/web-app/ ;  
# 4.1.2 Create a symlink to the web-app for Apache2
RUN ln -s ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/web-app  /opt/www/public/web-app

# 4.2.1 Create the web-rest in the project
RUN mkdir -p ${PRJ_NAME_ARG}/web-rest/ 
RUN rsync -a ./Project-Templates/web-rest/ ${PRJ_NAME_ARG}/web-rest/ ;  
# 4.2.2 Create a symlink to the web-rest for Apache2
RUN ln -s ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/web-rest  /opt/www/public/web-rest

# 4.2.3 About and doce
RUN mkdir -p ${PRJ_NAME_ARG}/about and doc/ 
RUN rsync -a "./Project-Templates/about and doc/" "${PRJ_NAME_ARG}/about and doc/" ;  

# 4.2.4 Rust library
RUN mkdir -p ${PRJ_NAME_ARG}/rust_lib_demo/ 
RUN rsync -a "./Project-Templates/rust_lib_demo/" "${PRJ_NAME_ARG}/rust_lib_demo/" ;  



# 4.3   Define permission fro apache2 directory   
RUN chown -R root:www-data /opt/www/public
RUN chmod -R 777 /opt/www/public


# 4.4   Define Apache2 loging
RUN mkdir -p /opt/www/log/
RUN touch /opt/www/log/localhost_error.log
RUN touch /opt/www/log/localhost_access.log
#RUN chown -R root:www-data /opt/www/log
RUN chown -R www-data:www-data /opt/www/log/*
#RUN chmod -R 777 /opt/www/log
RUN chmod -R 644 /opt/www/log/*


# 4.5   Copy the Python desktop GUI template files (NOT SURE WHAT TO DO WITH THIS)
RUN mkdir -p ${PRJ_NAME_ARG}/GUI-app/; 
RUN rsync -a ./Project-Templates/GUI-app/ ${PRJ_NAME_ARG}/GUI-app/ ;  


# 5 Make sure PHP XDebug is configured
RUN mkdir -p /opt/apache2/temp/
COPY required_php/php_debug.ini /opt/apache2/temp/
# Replace placeholder and append to the existing php.ini file
# RUN echo "; Enable Xdebug extension module\nzend_extension=xdebug.so\n\n[xdebug]\nxdebug.mode = debug, develop\nxdebug.start_with_request = yes\n; For Windows/Mac\n; xdebug.client_host = host.docker.internal\n; For Linux, replace with the actual host IP (hostname -i)\nxdebug.client_host = ${FIXED_IP}\nxdebug.client_port = 9003\nxdebug.log = /tmp/xdebug.log\n" >> /etc/php/8.2/fpm/php.ini
RUN sed "s|{{FIXED_IP}}|${FIXED_IP}|g" /opt/apache2/temp/php_debug.ini > /opt/apache2/temp/php_debug_modified.ini && \
    cat /opt/apache2/temp/php_debug_modified.ini >> /etc/php/8.2/fpm/php.ini
  
# 6) Visual Studio Code Settings and extensions for the projects
# Update launch files with project specific directory. I used environment variables before but that broke
RUN sed -i "s|__NJE-1970__|${PRJ_NAME_ARG}|g" ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/GUI-app/.vscode/launch.json
RUN sed -i "s|__NJE-1970__|${PRJ_NAME_ARG}|g" ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/web-app/.vscode/launch.json
RUN sed -i "s|__NJE-1970__|${PRJ_NAME_ARG}|g" ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/web-rest/.vscode/launch.json


RUN echo '{ \
  "folders": [ \
      { \ 
        "name": "Project: Desktop App (PY, Main)", \
        "path": "GUI-app", \
        "settings": { \ 
            "//comment": " NOT SUPPORTED python.pythonPath: /opt/python-env/bin/python" \ 
        } \ 
    }, \
    { \ 
        "name": "Rust_lib_demo", \
        "path": "rust_lib_demo" \ 
    }, \
    { \ 
        "name": "Project: web-app (PHP)", \
        "path": "web-app" \ 
    }, \
    { \ 
        "name": "Project: web-rest (PHP)", \
        "path": "web-rest" \ 
    }, \    
    { \ 
        "name": "About this Project and Doc)", \
        "path": "about and doc" \ 
    }, \
    { \ 
        "name": "Logs", \
        "path": "/opt/www/log/" \ 
    } \
  ], \
  "settings": \
  { \
    "explorer.autoReveal": false \    
  }, \
  "extensions": { \ 
    "recommendations": ["ms-vscode.makefile-tools", "ms-python.vscode-pylance", "ms-python.python", "ms-python.debugpy", "xyz.local-history", "DEVSENSE.phptools-vscode", "xdebug.php-debug", "DEVSENSE.profiler-php-vscode" ] \
  } \
}' > ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}/.project.code-workspace



# 7 Add Rust, to be used as library calls for Python  python -c "import rust-lib; print(rust_python_lib.add(3, 7))"
#
# 7.1 Install Rust and necessary dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libclang-dev \
    cmake && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y && \
    echo '. $HOME/.cargo/env' >> ~/.bashrc && \
    . $HOME/.cargo/env && \
    rustc --version


# 7.2 Ensure Rust is available in the container
ENV PATH="/root/.cargo/bin:${PATH}"


# 7.3 Install maturin using pipx in an isolated environment. 
# Maturin is used to build Python modules from Rust(install with pip), particularly with PyO3(cffi is an alternative).
# pipx can be used to avoid conflicts with system-wide Python installations.
#
RUN pip install maturin
# RUN
# See instructions.md file for steps to create a package
# 
# maturin build --release
# pip install target/wheels/*.whl
# python -c "import rust_lib_demo; print(rust_lib_demo.add(3, 7))"


# This makes sure the container is opens in the correct dir when using VSC ??
WORKDIR ${PRJ_BASE_ARG}/${PRJ_NAME_ARG}


# Test
# python3 --version && pip3 show PySide6

# End Docker file 