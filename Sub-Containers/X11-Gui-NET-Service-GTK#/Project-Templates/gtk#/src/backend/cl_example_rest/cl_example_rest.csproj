<Project Sdk="Microsoft.NET.Sdk">


<!--  TIP.
      When generating a new .NET Class Library (VSC: "Run Tasks -> AFX CREATE: Class Library (source)"), 
      you can copy the contents of this file to the newly created library. This file is ***generic*** 
      and can be used for any library created!

      - BE AWARE 'AssemblyName' and TargetName are automatically set based on folder name see: 1.  below !
      - Binaries will be in: ./bin/ and /src/backend/bin  see: 3. 'Binary  Output strategy' comment below         -->



  <!-- *** 1.  AUTOMATICALLY SET ARTIFACT NAME, based on the folder name. Please make sure the folder name starts with 'cl_' the cl wil be replace with 'lib_'.
               This will be used for the AssembklyName and the TargetName. This make sure the Tasks in VSC will work correctly. -->
  <PropertyGroup>
      <ProjectFolderName>$([System.IO.Path]::GetFileName($(MSBuildProjectDirectory)))</ProjectFolderName>   <!-- Get the folder name -->                
      <ArtifactName>$([System.Text.RegularExpressions.Regex]::Replace($(ProjectFolderName), '^cl_', 'lib_'))</ArtifactName> <!-- Replace. cl_ to lib_ -->          
      <AssemblyName>$(ArtifactName)</AssemblyName>                                                  
      <TargetName Condition="'$(CustomOutputName)' == ''">$(AssemblyName)</TargetName>                    
  </PropertyGroup>


  <PropertyGroup>   <!-- BEGIN GENERAL PropertyGroups -->
    <!--  2. Source Detection Strategy 
            Implicit includes are enabled by default for simplicity (to keep simple programs simple and more complicated ones, more complicated). 
            This means that every source file the compiler finds will be compiled, including source files found in subfolders that belong to 
            another class library, which may already be compiled for another DLL library. As a result, when the main program compiles, it will 
            compile the source of this subproject again, potentially leading to a 'duplicate implementation' error.

            A ***solution*** to this (with 'EnableDefaultCompileItems' set to 'true' — the default) is to exclude the project files from this subproject
            in the other project file(s), like this:
                <ProjectReference Include="src\backend\cl_example\cl_example.csproj" />

            This method, while functional, can feel cumbersome.

            A ***better solution*** is to take control and explicitly define which files need to be compiled. This can be done with the following line, 
            where you define the files to compile using the `<Compile Include=...>` command within the ItemGroup section:
    -->
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>


    <!--  
        TargetFrameworks: 
        - 'net8' is cross-platform.
        - 'net8.0-windows' is specific for Windows. 
        WARNING: When debugging in Windows, build with 'net8.0-windows'! 
        Otherwise, breakpoints will not be hit (see also tasks.json for configuration details).
    -->
    <TargetFrameworks>net8;net8.0-windows</TargetFrameworks>
    <ImplicitUsings>disable</ImplicitUsings>            <!-- 'enable' brings in common namespaces by default; 'disable' gives you more control over which namespaces are included. -->
    <Nullable>enable</Nullable>                         <!-- Enables nullable reference types to help identify potential nullability issues during development. -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>  <!-- Cuases multiple definitions-->

  </PropertyGroup>                            <!-- END GENERAL PropertyGroups -->

 
  <!--  BEGIN SPECIFIC PropertyGroups -->

  <!-- 
    3.  Binary  Output strategy.
        We could use a general binary location in the 'backend' directory for all our libraries. However, because the output files for class libraries 
        are also copied to the main project's  output 'binary' directory, it would require cleaning two targets:  
          1.  The subfolder where all files can be deleted.  
          2.  The main project's 'bin' folder where only the specific library's files need to be deleted 
              (we don't want to delete the output files for other libraries).  

          For this reason, it is best to copy the class libraries directly to the main output directory.

          UPDATE: THIS TURNS OUT TO BE A BAD IDEA.
          Using the root bin folder for all subprojects has the effect that the references cannot be found (this
          is probably due to the fact that some files still remain in the bin folder of the subproject).
          
          SOLUTION FOR NOW:
          For now, the binaries of all subfolders will be sent to the folder ./src/backend/bin/ instead.
          .NET it self will copy those files to the appropiate bin folder in the root.
  -->
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">          
          <OutputPath>..\bin\Debug\</OutputPath>  
      </PropertyGroup>
      <PropertyGroup Condition="'$(Configuration)'=='Release'">
          <OutputPath>..\bin\Release\</OutputPath>
   </PropertyGroup>
   <!-- END SPECIFIC PropertyGroups -->


  <!--  Define the files to build -->
  <ItemGroup>        
     <Compile Include="**/*.cs" />                          <!-- includes file in current folder and in all (future) sub folders -->    
      <Compile Remove="obj\**\*.AssemblyAttributes.cs" />   <!-- Causes duplicated errors-->
  </ItemGroup>


</Project>
